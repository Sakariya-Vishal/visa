---
import { Image, Picture } from "@astrojs/image/components";
import close from "../../public/Images/chat_close.svg"
import chat_send_btn from "../../public/Images/chat_send.svg";
import chat from "../../public/Images/chat.svg";
import double_right from "../../public/Images/double_right.svg"
import sanskar_chat_logo from "../../public/Images/sanskar_chat_logo.svg";
import "../styles.css";
---


<div class="fixed bottom-5 right-16 z-30 items-center cursor-pointer" id="chat_icon">
    <Image loading="eager" src={chat} alt="chatbot"/>
</div>


<!-- chat popup -->
<div class="bg-white box hidden fixed bottom-5 right-2 z-30" id="chat_popup">
    <Image src={close} alt="close" class="absolute right-4 top-4 cursor-pointer" id="close_btn"/>


    <div class="lg:h-[30rem] md:h-[40rem] h-full lg:w-96 md:w-[26rem] w-full">
        <div class=" flex items-center gap-2 bg-[#F6F9FB] rounded-t-lg p-4 text-[#31393c] lg:text-lg md:text-base text-sm font-semibold">
            <Image loading="eager" src={sanskar_chat_logo} alt="sanskar logo"/>
            <p>Chat With Sanskar</p>
        </div>

        <div class="overflow-y-scroll lg:h-[27rem] md:h-[36rem] h-full" id="messages">

            <!-- Received Message    -->
            <!-- <div class="px-2 pt-2 text-right ml-5 mt-5">
                <p class="text-white !text-left bg-[#3E96F4] text-xs lg:text-base md:text-sm p-2 rounded-l-[10px] rounded-b-[10px] inline-block">
                  Hello
                </p>
              <div class="flex items-center justify-end">
                <p class="text-[#9A9A9A] text-xs lg:text-sm md:text-xs">11:53 AM</p>
                <img src="https://sanskartechnolab.com/files/single_right.svg" alt="single tick"/>
              </div>
            </div> -->
          
            <!-- Sent Message -->
            <!-- <div class="px-2 pt-2 mr-5">
                <p class="text-[#31393C] bg-[#F6F9FB] text-xs lg:text-base md:text-sm p-2 rounded-r-[10px] rounded-b-[10px] inline-block">
                  I am looking for a new ERP system for my company
                </p>
                <span class="relative">
                    <p class="text-[#9A9A9A] lg:text-sm md:text-xs text-xs absolute right-0 whitespace-nowrap">11:53 AM</p>
                </span>
            </div> -->
          
            <!-- Another Received Message -->
            <!-- <div class="px-2 pt-2 text-right ml-5 mt-5">
                <p class="text-white !text-left bg-[#3E96F4] text-xs lg:text-base md:text-sm p-2 rounded-l-[10px] rounded-b-[10px] inline-block">
                    Another received messageadsf
                </p> 
                <div class="flex items-center justify-end">
                  <p class="text-[#9A9A9A] text-xs lg:text-sm md:text-xs">11:53 AM</p>
                  <Image src={double_right} alt="Double Right" class="w-4 h-4 ml-2" />
                </div>
            </div> -->

        </div>
          
    </div>
    
    <form class=" flex gap-2 items-center p-2" id="chat_form">
        <input
          class="w-10/12 rounded-[10px] text-[#333333] border-none bg-[#F6F9FB]"
          type="text"
          placeholder="Message"
          name="chat_message"
          id = "chat_message"
        />
        <button class="w-2/12">
            <Image loading="eager" src={chat_send_btn} alt="chatbot"/>
        </button>
        
    </form>



</div>

<style>
    .box{
        border-radius: 10px;
        border: 1px solid #D0D0D0;
        background: #FFF;
        box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.25);
    }
</style>

<script>
    var token = window.localStorage.getItem("chat_token")
    if (!token){
        window.localStorage.setItem("chat_token", Math.random().toString(36).substr(2))
    }

    const chat_icon = document.getElementById("chat_icon");
    const chat_popup = document.getElementById("chat_popup");
    const close_btn = document.getElementById("close_btn");
    const chat_message = document.getElementById("chat_message")
    var form = document.getElementById("chat_form");
    
    
    function get_messages()
    {
        fetch(`https://sanskar.frappe.cloud/api/resource/Astro Site Chat?filters=[["token", "=", "${token}"]]&fields=["name", "date", "message", "read", "is_owner"]&order_by=date asc`,{
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    }).then(response => response.json())
                        .then(data => {
                            var messages = data.data
                            for (let i = 0; i < messages.length; i++) {
                                console.log(messages[i])

                                if (messages[i].is_owner == 1){

                                    const container = document.getElementById('messages');

                                    // Create the outermost div element with classes
                                    const outerDiv = document.createElement('div');
                                    outerDiv.className = 'px-2 pt-2 text-right ml-5';

                                    // Create the message paragraph element
                                    const messageParagraph = document.createElement('p');
                                    messageParagraph.className = 'text-white !text-left bg-[#3E96F4] text-xs lg:text-base md:text-sm p-4 py-2 rounded-l-[10px] rounded-b-[10px] inline-block';
                                    messageParagraph.textContent = messages[i].message;

                                    // Create the inner flex container
                                    const innerFlexContainer = document.createElement('div');
                                    innerFlexContainer.className = 'flex items-center justify-end';

                                    // Create the timestamp paragraph element
                                    const timestampParagraph = document.createElement('p');
                                    timestampParagraph.className = 'text-[#9A9A9A] text-xs lg:text-sm md:text-xs';
                                    timestampParagraph.textContent = formatDateToAMPM(messages[i].date);

                                    // Create the image element
                                    const imageElement = document.createElement('img');
                                    if (messages[i].read == 1)
                                    {
                                        imageElement.src = 'https://sanskartechnolab.com/files/double_right.svg';
                                    }
                                    else{
                                        imageElement.src = 'https://sanskartechnolab.com/files/single_right.svg';
                                    }
                                    imageElement.alt = 'single tick';
                                    imageElement.className = "w-4 h-4 ml-2";

                                    // Append elements to their respective parents
                                    innerFlexContainer.appendChild(timestampParagraph);
                                    innerFlexContainer.appendChild(imageElement);
                                    outerDiv.appendChild(messageParagraph);
                                    outerDiv.appendChild(innerFlexContainer);
                                    container.appendChild(outerDiv);
                                }
                                else{
                                    // if message recived by admin

                                    const container = document.getElementById('messages');

                                    // Create the outermost div element with classes
                                    const outerDiv = document.createElement('div');
                                    outerDiv.className = 'px-2 pt-2 mr-5 mt-5';

                                    // Create the message paragraph element
                                    const messageParagraph = document.createElement('p');
                                    messageParagraph.className = 'text-[#31393C] bg-[#F6F9FB] text-xs lg:text-base md:text-sm p-4 py-2 rounded-r-[10px] rounded-b-[10px] inline-block';
                                    messageParagraph.textContent = messages[i].message;

                                    // Create the inner relative span container
                                    const innerSpan = document.createElement('span');
                                    innerSpan.className = 'relative';

                                    // Create the timestamp paragraph element within the span
                                    const timestampParagraph = document.createElement('p');
                                    if (messages[i].message.length < 5)
                                    {
                                        timestampParagraph.className = 'text-[#9A9A9A] lg:text-sm md:text-xs text-xs absolute -right-8 whitespace-nowrap overflow-visible';
                                    }
                                    else if(messages[i].message.length <= 10){
                                        timestampParagraph.className = 'text-[#9A9A9A] lg:text-sm md:text-xs text-xs absolute -right-3 whitespace-nowrap overflow-visible';
                                    }
                                    else{
                                        timestampParagraph.className = 'text-[#9A9A9A] lg:text-sm md:text-xs text-xs absolute right-0 whitespace-nowrap overflow-visible';
                                    }
                                    timestampParagraph.textContent = formatDateToAMPM(messages[i].date);
                                    // timestampParagraph.textContent = messages[i].message.length;

                                    // Append elements to their respective parents
                                    innerSpan.appendChild(timestampParagraph);
                                    outerDiv.appendChild(messageParagraph);
                                    outerDiv.appendChild(innerSpan);
                                    container.appendChild(outerDiv);
                                }

                            }

                        })  
                        
                    }

    function show_popup(){
        chat_popup.classList.remove("hidden")
        chat_icon.classList.add("hidden")
        get_messages()
        // const messages = document.getElementById("messages");
        // messages.scrollTop = messages.scrollHeight;
    }   

    function close_popup(){
        chat_popup.classList.add("hidden")
        chat_icon.classList.remove("hidden")
    }

    function send_message(e){
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData.entries());
        formData.set("data", JSON.stringify(data));
        var message = data.chat_message;

        if (message === ""){
            chat_message.classList.add("!border", "!border-red-500")
        }
        else{
            fetch("https://sanskar.frappe.cloud/api/resource/Astro Site Chat",{
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: message,
                        token: token,
                        is_owner: 1
                    })
                    }).then((res) => {
                    if(res.status === 200){
                        // alert("Your Message is Sent.")
                        chat_message.value = ""
                    }
                    else{
                        alert("faild to send message")
                    }
                }).catch((error) => {
                    console.log(error)
                })            


        }
    }

    function remove_error_class(){
        chat_message.classList.remove("!border", "!border-red-500")
    }
    
    function formatDateToAMPM(dateTimeString) {
        // Parse the input date string
        const date = new Date(dateTimeString);

        // Get the hours and minutes
        const hours = date.getHours();
        const minutes = date.getMinutes();

        // Determine whether it's AM or PM
        const ampm = hours >= 12 ? 'PM' : 'AM';

        // Convert hours to 12-hour format
        const formattedHours = hours % 12 === 0 ? 12 : hours % 12;

        // Add leading zero to minutes if needed
        const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;

        // Format the result as "hh:mm AM/PM"
        const formattedTime = `${formattedHours}:${formattedMinutes} ${ampm}`;

        return formattedTime;
        }


    chat_message.addEventListener("focus", remove_error_class)

    
    form.addEventListener("submit", send_message);
    chat_icon.addEventListener("click", show_popup);
    close_btn.addEventListener("click", close_popup);

    const socket = io.connect('http://'); 
    
    // Replace with your server's URL
    

</script>

<script>
function getLocation() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;

        // Make a request to a reverse geocoding API to get the country
        fetch(`https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=YOUR_API_KEY`)
          .then(response => response.json())
          .then(data => {
            const country = data.results[0].components.country;
            console.log("country", country)
          })
          .catch(error => console.error(error));
      });
    } else {
      console.log("Geolocation is not supported by this browser.");
    }
  }

  // Call the getLocation function when the page loads
  window.onload = getLocation;
  </script>